#!/usr/bin/perl
###############################################################################
# Description:
#       Perl CGI Session cleanup script.
#       This is designed to be run periodcially to detect and clean up
#       expired and no longer required Perl CGI Session files.
#
#       Perl CGI Session does not have a native mechanism to do this for us.
#
# Licence:
#       This file is part of the Jarvis WebApp/Database gateway utility.
#
#       Jarvis is free software: you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation, either version 3 of the License, or
#       (at your option) any later version.
#
#       Jarvis is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with Jarvis.  If not, see <http://www.gnu.org/licenses/>.
#
#       This software is Copyright 2022 by Jonathan Couper-Smartt.
###############################################################################
use strict;
use warnings;
use CGI::Session;
use Getopt::Long;
use Data::Dumper;
use XML::LibXML;
use POSIX 'strftime';

###############################################################################
# DEFAULTS AND COMMAND LINE FLAGS
###############################################################################
my $jconf_dir           = '/etc/jarvis';
my $session_file_prefix = 'cgisess_';
my $show_help           = 0;
my $debug               = 0;

###############################################################################
# USAGE
###############################################################################
sub usage {
    print STDERR
"usage: clean-sessions.pl

    The purpose of this script is to be periodically run to clean up files generated by Perls CGI Session library.
    This library does not natively have a mechanism for automatically removing generated session files.

    Configurable Flags:
        --jconf-dir         # The directory to check for Jarvis configuration files. Default: /etc/jarvis
        --file-prefix       # Define the file prefix to use when locating CGI session files. Default: cgisess_
        --debug             # Show additional debug log output.
        --help              # Show this help information

";
    exit 1;
}

###############################################################################
# PRINT_LOG
###############################################################################
# Basic logging function to take a string input and variables and encode it with a date.
sub print_log {
    my ($message, @vars) = @_;
    chomp($message);
    printf ("%10s %s\n", strftime("%Y-%m-%d %H:%M:%S", localtime), sprintf ($message, @vars));
}

###############################################################################
# MAIN
###############################################################################

# Get comand line settings.
&Getopt::Long::GetOptions (
    "jconf-dir=s"     => \$jconf_dir
    , "file-prefix=s" => \$session_file_prefix
    , "debug"         => \$debug
    , "help"          => \$show_help
) || &usage ();

# Asking for help?
if ($show_help) {
    usage ();
}

# Keep a track of all directories we've processed. No point in doign the same multiple times.
my $processed_dirs = {};
# Track statistics.
my $deleted_sessions = 0;

# Open the configured dir.
opendir my $config_directory, $jconf_dir or die "Failed to open directory '$jconf_dir' $!";

# Locate all XML configuration files present in our JConf provided directory.
foreach my $possible_jconf_file (readdir $config_directory) {

    # Add provided directory.
    $possible_jconf_file = "$jconf_dir/$possible_jconf_file";

    # Not XML?
    next if $possible_jconf_file !~ /\.xml$/;

    $debug && print_log ("Parsing Jarvis Config File: %s\n", $possible_jconf_file);

    # Attempt to load the XML configuration file.
    my $xml;
    eval {
        $xml = XML::LibXML->load_xml (location => $possible_jconf_file);
    };

    # Check for XML::LibXML error object.
    if (ref ($@)) {
        # If we have a specific XML::LibXML::Error object then we can pretty print the error.
        my $error_domain  = $@->domain ();
        my $error_message = $@->message ();

        # This might be a bad file. We won't treat it as fatal but lets warn.
        print_log ("Cannot Read '%s': [%s] %s\n", $possible_jconf_file, $error_domain, $error_message);
        next;

    # Fall back to default error handling.
    } elsif ($@) {
        # Again it might just be a bad file. We won't treat it as fatal.
        print_log ("Cannot Read '%s': %s\n", $possible_jconf_file, $@);
        next;
    }

    # Have a good file? and its valid XML? Lets go ahead and see if we can find our CGI configuration.
    if ($xml->exists ('./jarvis/app/sessiondb')) {
        # Find session config.
        my $session_db = $xml->findnodes ('./jarvis/app/sessiondb')->pop ();

        # Check that we are storing it as a file.
        next if $session_db->{store} !~ /driver:file/;

        # Now check if we have a directory?
        my $session_params;
        if ($session_db->exists ('./parameter')) {
            foreach my $session_param ($session_db->findnodes ('./parameter')) {
                $session_params->{lc ($session_param->{'name'})} = $session_param->{'value'};
            }
        }

        # Have a directory configuration?
        my $session_dir = $session_params->{directory};
        next if ! defined ($session_dir);
        next if defined ($processed_dirs->{$session_dir});
        $processed_dirs->{$session_dir} = 1;

        # Open the configured dir.
        opendir my $session_directory, $session_dir or die "Failed to open directory '$session_dir' $!";

        # Track statistics per directory.
        my $deleted_sessions_in_directory = 0;

        # Have a valid directory? Ok lets process that directory and look for any session files that might be in there?
        foreach my $possible_session_file (readdir $session_directory) {

            # Add the session dir.
            $possible_session_file = "$session_dir/$possible_session_file";

            # Check if we're looking at a CGI session named file.
            next if $possible_session_file !~ /^\Q$session_dir\E\/\Q$session_file_prefix\E(.*)/;

            # Next try to load the file content and determine if we are looking at a valid session.
            my $content;
            open (my $fh, '<', $possible_session_file) or die "cannot open file $possible_session_file";
            {
                local $/;
                $content = <$fh>;
            }
            close($fh);

            # The CGI sessions are stored as a serialized object with the name 'D'. We can just eval it out into an object.
            # If for whatever reason the session file is invalid this will return undef.
            my $D;
            eval ($content);

            # If we have a valid object go ahead and pull it apart and see if its an expired session.
            if (! defined ($D)) {
                print_log ("Unable to read session data in: %s\n", $possible_session_file);

            } elsif ($D && $D->{_SESSION_ETIME} && $D->{_SESSION_ATIME} && (time () >= $D->{_SESSION_ETIME} + $D->{_SESSION_ATIME})) {
                $debug && print_log ("Session %s has Expired. Removing.\n", $possible_session_file);
                unlink ($possible_session_file) or print_log ("Cannot delete session %s: %s", $possible_session_file, $!);
                $deleted_sessions ++;
                $deleted_sessions_in_directory ++;

            } else {
                $debug && print_log ("Session %s Still Valid.\n", $possible_session_file);
            }
        }
        print_log ("Removed $deleted_sessions_in_directory session files from $session_dir.\n");

    } else {
        $debug && print_log ("Jarvis Config File '%s' does not contain Session DB property.\n", $possible_jconf_file);
        next;
    }
}

# Close the directory once we're done.
closedir $config_directory;

print_log ("Cleanup Complete. Removed $deleted_sessions session files.\n");

exit 0;
